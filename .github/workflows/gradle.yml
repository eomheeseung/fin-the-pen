# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Finthepen CI/CD branche develop

on:
  push:
    branches: [ develop ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Jdk 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin' 
    - name: list file fin_the_pen
      run: ls -al
        
    - name: Grand execute permission for graldew
      run: chmod +x fin_the_pen/gradlew
      
    - name: Build with Gradle
      run: cd fin_the_pen; ./gradlew clean bootjar -x test -Pprofile=prod
      
    - name: Find jar file
      run: cd fin_the_pen/build/libs; ls -al

    # - name: Copy JAR to EC2
    #   run: |
    #     scp -i ${{ secrets.EC2_SSH_KEY }} \
    #           -o StrictHostKeyChecking=no \
    #           fin_the_pen/build/libs/fin_the_pen-0.0.1-SNAPSHOT.jar \
    #           ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ec2-user/test


    - name: CD to Ec2 instance
      uses: tiyee/action-ssh@v1.0.1
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        port: 22
        privateKey: ${{ secrets.EC2_SSH_KEY }}
        command: |
          # Set variables
          local_jar="fin_the_pen/build/libs/fin_the_pen-0.0.1-SNAPSHOT.jar"
          remote_path="/home/ec2-user/test"
          remote_jar="${remote_path}/fin_the_pen-0.0.1-SNAPSHOT.jar"

          # Check if the file exists on the server
          if ssh -i ${{ secrets.EC2_SSH_KEY }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "[ -f $remote_jar ]"; then
            # If it exists, remove it
            # ssh -i ${{ secrets.EC2_SSH_KEY }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "rm $remote_jar"
          # fi
          # # Copy JAR file to EC2
          echo "$remote_jar"; echo "$local_jar
          # scp -i ${{ secrets.EC2_SSH_KEY }} $local_jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:$remote_path
          
      
